{"version":3,"sources":["store/PostList.js","store/index.js","api/getDataFromUrl.js","api/postsUrl.js","api/usersUrl.js","api/commentsUrl.js","PostList/Post/PostAuthorInfo.js","PostList/Post/CommentList/Comment/NewComment.js","PostList/Post/CommentList/CommentList.js","PostList/Post/Post.js","PostList/PostList.js","App.js","index.js"],"names":["getPreparedPosts","state","preparedPosts","getIsLoadingPosts","isLoadingPosts","getIsLoadedPosts","isLoadedPosts","initialState","postsReducer","arguments","length","undefined","action","type","Object","objectSpread2","posts","status","rootReducer","combineReducers","store","createStore","getDataFromUrl","url","defaultData","responsePromise","data","regenerator_default","a","async","_context","prev","next","awrap","fetch","sent","ok","json","abrupt","stop","postsUrl","usersUrl","commentsUrl","PostAuthorInfo","_ref","postAuthor","react_default","createElement","className","name","email","address","street","suite","city","zipcode","NewComment","singleComment","body","CommentList","comments","map","comment","Comment_NewComment","key","id","Post","singlePost","searchQuery","getHighlightedText","text","textToHighLight","formatedText","replace","regular","RegExp","concat","split","part","index","toString","Fragment","title","Post_PostAuthorInfo","author","Post_CommentList_CommentList","defaultProps","PostList","setPreparedPosts","setIsLoadingPosts","setIsLoadedPosts","_useState","useState","_useState2","slicedToArray","setSearchQuery","getPreparedPostsFromServer","_ref2","_ref3","users","Promise","all","post","find","user","userId","filter","postId","debouncedHandleInputChange","func","delay","timer","clearTimeout","_len","args","Array","_key","setTimeout","apply","debounce","trim","toLowerCase","onChange","event","target","value","placeholder","includes","PostList_Post_Post","onClick","_context2","t0","t1","mapDispatchToProps","connect","App","src_PostList_PostList","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.6b7095f8.chunk.js","sourcesContent":["const ACTION_TYPE_SET_PREPARED_POSTS = 'SET_POSTS';\nconst ACTION_TYPE_IS_LOADING_POSTS = 'IS_LOADING_POSTS';\nconst ACTION_TYPE_IS_LOADED_POSTS = 'IS_LOADED_POSTS';\n\n// actions\n\nexport const setPosts = posts => ({\n  type: ACTION_TYPE_SET_PREPARED_POSTS,\n  posts,\n});\n\nexport const setIsLoading = value => ({\n  type: ACTION_TYPE_IS_LOADING_POSTS,\n  status: value,\n});\n\nexport const setIsLoaded = value => ({\n  type: ACTION_TYPE_IS_LOADED_POSTS,\n  status: value,\n});\n\n// selectors\nexport const getPreparedPosts = state => state.preparedPosts.preparedPosts;\nexport const getIsLoadingPosts = state => state.preparedPosts.isLoadingPosts;\nexport const getIsLoadedPosts = state => state.preparedPosts.isLoadedPosts;\n\nconst initialState = {\n  preparedPosts: [],\n  isLoadingPosts: false,\n  isLoadedPosts: false,\n};\n\nconst postsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPE_SET_PREPARED_POSTS:\n      return {\n        ...state, preparedPosts: action.posts,\n      };\n\n    case ACTION_TYPE_IS_LOADING_POSTS:\n      return {\n        ...state, isLoadingPosts: action.status,\n      };\n\n    case ACTION_TYPE_IS_LOADED_POSTS:\n      return {\n        ...state, isLoadedPosts: action.status,\n      };\n\n    default:\n      return { state };\n  }\n};\n\nexport default postsReducer;\n","import { createStore, combineReducers } from 'redux';\n\n// here needed import of reducers;\nimport postsReducer from './PostList';\n\n// need to export needed selectors;\n\nconst rootReducer = combineReducers({\n  preparedPosts: postsReducer,\n});\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","const getDataFromUrl = async(url, defaultData) => {\n  const responsePromise = await fetch(url);\n\n  if (responsePromise.ok) {\n    const data = await responsePromise.json();\n\n    return data;\n  }\n\n  return defaultData;\n};\n\nexport default getDataFromUrl;\n","const postsUrl = 'https://jsonplaceholder.typicode.com/posts/';\n\nexport default postsUrl;\n","const usersUrl = 'https://jsonplaceholder.typicode.com/users';\n\nexport default usersUrl;\n","const commentsUrl = 'https://jsonplaceholder.typicode.com/comments';\n\nexport default commentsUrl;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PostAuthorInfo = ({ postAuthor }) => (\n\n  <div className=\"post__author-info\">\n\n    <h3 className=\"author-info__name\">{postAuthor.name}</h3>\n    <p className=\"author-info__email\">{postAuthor.email}</p>\n    <p className=\"author-info__address\">\n        street:\n      {' '}\n      {postAuthor.address.street}\n      <br />\n        suite:\n      {' '}\n      {postAuthor.address.suite}\n      <br />\n        city:\n      {' '}\n      {postAuthor.address.city}\n      <br />\n        zipcode:\n      {' '}\n      {postAuthor.address.zipcode}\n    </p>\n\n  </div>\n\n);\n\nPostAuthorInfo.propTypes = {\n  postAuthor: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.object,\n  }).isRequired,\n\n};\n\nexport default PostAuthorInfo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst NewComment = ({ singleComment }) => (\n  <li className=\"comment\">\n    <div className=\"comment__author-info\">\n      {singleComment.name}\n      <br />\n      {singleComment.email}\n    </div>\n    <div className=\"comment__body\">\n      {singleComment.body}\n    </div>\n  </li>\n);\n\nNewComment.propTypes = {\n  singleComment: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    body: PropTypes.string,\n  }).isRequired,\n};\n\nexport default NewComment;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport OneComment from './Comment/NewComment';\n\nconst CommentList = ({ comments }) => (\n  <ul className=\"post__comments\">\n    {comments.map(\n      comment => <OneComment key={comment.id} singleComment={comment} />\n    )}\n  </ul>\n);\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.object,\n  ).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PostAuthorInfo from './PostAuthorInfo';\nimport CommentList from './CommentList/CommentList';\n\nconst Post = ({ singlePost, searchQuery }) => {\n  const getHighlightedText = (text, textToHighLight) => {\n    const formatedText = text.replace(/[\\n\\r]/g, ' ');\n\n    if (textToHighLight.length === 0) {\n      return <span>{formatedText}</span>;\n    }\n\n    const regular = new RegExp(`(${textToHighLight})`, 'gi');\n\n    return (\n      <span>\n        {formatedText.split(regular).map(\n          (part, index) => (part === textToHighLight\n            ? (\n              <span\n                key={part + index.toString()}\n                className=\"highlighted\"\n              >\n                {part}\n              </span>\n            )\n            : part)\n        )}\n      </span>\n    );\n  };\n\n  return (\n    <>\n      <article className=\"post\">\n        <h1 className=\"post__title\">\n          {getHighlightedText(singlePost.title, searchQuery)}\n        </h1>\n        <h2 className=\"post__body\">\n          {getHighlightedText(singlePost.body, searchQuery)}\n        </h2>\n        <PostAuthorInfo postAuthor={singlePost.author} />\n        <CommentList comments={singlePost.comments} />\n      </article>\n    </>\n  );\n};\n\nPost.propTypes = {\n  singlePost: PropTypes.shape({\n    title: PropTypes.string,\n    body: PropTypes.string,\n    author: PropTypes.object,\n    comments: PropTypes.array,\n  }).isRequired,\n  searchQuery: PropTypes.string,\n};\n\nPost.defaultProps = {\n  searchQuery: '',\n};\n\nexport default Post;\n","/* eslint-disable no-shadow */\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport getDataFromUrl from '../api/getDataFromUrl';\nimport postsUrl from '../api/postsUrl';\nimport usersUrl from '../api/usersUrl';\nimport commentsUrl from '../api/commentsUrl';\nimport Post from './Post/Post';\nimport { getPreparedPosts,\n  setPosts,\n  getIsLoadingPosts,\n  setIsLoading,\n  getIsLoadedPosts,\n  setIsLoaded } from '../store/PostList';\n\nfunction PostList(\n  {\n    preparedPosts,\n    setPreparedPosts,\n    isLoadingPosts,\n    setIsLoadingPosts,\n    isLoadedPosts,\n    setIsLoadedPosts,\n  }\n) {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const getPreparedPostsFromServer = async() => {\n    const [posts, users, comments] = await Promise.all(\n      [getDataFromUrl(postsUrl, []),\n        getDataFromUrl(usersUrl, []),\n        getDataFromUrl(commentsUrl, [])]\n    );\n\n    return posts.map(\n      post => ({\n        ...post,\n        author: users.find(\n          user => user.id === post.userId\n        ),\n        comments: comments.filter(\n          comment => comment.postId === post.id\n        ),\n      })\n    );\n  };\n\n  const handleInputChange = (text) => {\n    setSearchQuery(text.trim().toLowerCase());\n  };\n\n  const debounce = (func, delay) => {\n    let timer;\n\n    return (...args) => {\n      clearTimeout(timer);\n      timer = setTimeout(func, delay, ...args);\n    };\n  };\n\n  const debouncedHandleInputChange = debounce(handleInputChange, 1000);\n\n  return (\n    isLoadedPosts\n      ? (\n        <section className=\"posts\">\n          <input\n            type=\"text\"\n            name=\"searchInPosts\"\n            className=\"input input_search-in-posts\"\n            onChange={event => debouncedHandleInputChange(event.target.value)}\n            placeholder=\"type for searching\"\n          />\n\n          <ul className=\"posts-list\">\n\n            {preparedPosts\n              .filter(\n                post => (\n                  (post.title + post.body).replace(/[\\n\\r]/g, ' ')\n                    .toLowerCase().includes(searchQuery)\n                )\n              )\n              .map(\n                post => (\n                  <li key={post.id} className=\"post-list__item\">\n                    <Post searchQuery={searchQuery} singlePost={post} />\n                  </li>\n                )\n              )\n            }\n          </ul>\n        </section>\n      )\n      : (\n        <button\n          type=\"button\"\n          onClick={\n            async() => {\n              setIsLoadingPosts(true);\n              setPreparedPosts(await getPreparedPostsFromServer());\n              setIsLoadedPosts(true);\n            }\n          }\n        >\n          {isLoadingPosts ? 'Loading' : 'Load the List of Posts'}\n        </button>\n      )\n\n  );\n}\n\nconst mapStateToProps = state => ({\n  preparedPosts: getPreparedPosts(state),\n  isLoadingPosts: getIsLoadingPosts(state),\n  isLoadedPosts: getIsLoadedPosts(state),\n});\n\nconst mapDispatchToProps = {\n  setPreparedPosts: setPosts,\n  setIsLoadingPosts: setIsLoading,\n  setIsLoadedPosts: setIsLoaded,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PostList);\n\nPostList.propTypes = {\n  preparedPosts: PropTypes.arrayOf(\n    PropTypes.object\n  ),\n  setPreparedPosts: PropTypes.func.isRequired,\n  isLoadingPosts: PropTypes.bool.isRequired,\n  setIsLoadingPosts: PropTypes.func.isRequired,\n  isLoadedPosts: PropTypes.bool.isRequired,\n  setIsLoadedPosts: PropTypes.func.isRequired,\n};\n\nPostList.defaultProps = {\n  preparedPosts: [],\n};\n","import React from 'react';\nimport PostList from './PostList/PostList';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <h1 className=\"app-heading\">Dynamic list of posts</h1>\n      <PostList />\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root')\n);\n"],"sourceRoot":""}