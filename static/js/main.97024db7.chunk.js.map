{"version":3,"sources":["store/PostListReducer.js","store/IsLoadingReducer.js","store/index.js","api/getDataFromUrl.js","api/postsUrl.js","api/usersUrl.js","api/commentsUrl.js","PostList/Post/PostAuthorInfo.js","PostList/Post/CommentList/Comment/NewComment.js","PostList/Post/CommentList/CommentList.js","PostList/Post/Post.js","PostList/PostList.js","App.js","index.js"],"names":["getPreparedPosts","state","preparedPosts","getIsLoadedPosts","isLoadedPosts","initialState","postsReducer","arguments","length","undefined","action","type","Object","objectSpread2","posts","status","map","post","id","postId","comments","filter","comment","commentId","getIsLoading","isLoading","isLoadingReducer","rootReducer","combineReducers","store","createStore","getDataFromUrl","url","defaultData","responsePromise","data","regenerator_default","a","async","_context","prev","next","awrap","fetch","sent","ok","json","abrupt","stop","postsUrl","usersUrl","commentsUrl","PostAuthorInfo","_ref","postAuthor","react_default","createElement","className","name","email","address","street","suite","city","zipcode","mapDispatchToProps","setCommentToRemove","connect","singleComment","body","onClick","CommentList","Comment_NewComment","key","Post","singlePost","searchQuery","removePostId","getHighlightedText","text","textToHighLight","formatedText","replace","regular","RegExp","concat","split","part","index","toString","Fragment","title","Post_PostAuthorInfo","author","Post_CommentList_CommentList","defaultProps","PostList","setPreparedPosts","isLoadingPosts","setIsLoadingPosts","setIsLoadedPosts","_useState","useState","_useState2","slicedToArray","setSearchQuery","getPreparedPostsFromServer","_ref2","_ref3","users","Promise","all","find","user","userId","debouncedHandleInputChange","func","delay","timer","clearTimeout","_len","args","Array","_key","setTimeout","apply","debounce","trim","toLowerCase","onChange","event","target","value","placeholder","includes","PostList_Post_Post","_context2","t0","t1","App","PostList_PostList","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.97024db7.chunk.js","sourcesContent":["const ACTION_TYPE_SET_PREPARED_POSTS = 'SET_POSTS';\nconst ACTION_TYPE_IS_LOADED_POSTS = 'IS_LOADED_POSTS';\nconst ACTION_TYPE_COMMENT_TO_DELETE = 'COMMENT_TO_DELETE';\nconst ACTION_TYPE_POST_TO_DELETE = 'POST_TO_DELETE';\n\n// actions\n\nexport const setPosts = posts => ({\n  type: ACTION_TYPE_SET_PREPARED_POSTS,\n  posts,\n});\n\nexport const setIsLoaded = value => ({\n  type: ACTION_TYPE_IS_LOADED_POSTS,\n  status: value,\n});\n\nexport const setCommentIdToRemove = (commentId, postId) => ({\n  type: ACTION_TYPE_COMMENT_TO_DELETE,\n  commentId,\n  postId,\n});\n\nexport const removePost = (postId) => ({\n  type: ACTION_TYPE_POST_TO_DELETE,\n  postId,\n});\n\n// selectors\nexport const getPreparedPosts = state => state.preparedPosts.preparedPosts;\nexport const getIsLoadedPosts = state => state.preparedPosts.isLoadedPosts;\n\n\nconst initialState = {\n  preparedPosts: [],\n  isLoadedPosts: false,\n};\n\nconst postsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPE_SET_PREPARED_POSTS:\n      return {\n        ...state, preparedPosts: action.posts,\n      };\n\n    case ACTION_TYPE_IS_LOADED_POSTS:\n      return {\n        ...state, isLoadedPosts: action.status,\n      };\n\n    case ACTION_TYPE_COMMENT_TO_DELETE:\n      return {\n        ...state,\n        preparedPosts: state.preparedPosts.map(\n          post=>{\n            if(post.id===action.postId){\n              return {\n                ...post,\n                comments: post.comments.filter(\n                  comment=>comment.id!==action.commentId\n                )\n              }\n            }\n            return post;\n          }\n        )\n      };\n\n    case ACTION_TYPE_POST_TO_DELETE: return {\n      ...state,\n      preparedPosts: state.preparedPosts.filter(\n        (post)=> post.id !== action.postId\n      )\n    };\n\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;\n","const ACTION_TYPE_SET_IS_LOADING = 'SET_IS_LOADING';\n\nexport const setIsLoading = isLoading => ({\n  type: ACTION_TYPE_SET_IS_LOADING,\n  isLoading,\n});\n\nexport const getIsLoading = state => state.isLoading;\n\nconst isLoadingReducer = (isLoading = false, action) => {\n  switch (action.type) {\n    case ACTION_TYPE_SET_IS_LOADING: return action.isLoading;\n\n    default:\n      return isLoading;\n  }\n};\n\nexport default isLoadingReducer;\n","import { createStore, combineReducers } from 'redux';\n\n// here needed import of reducers;\nimport postsReducer from './PostListReducer';\nimport isLoadingReducer from \"./IsLoadingReducer\";\n\nconst rootReducer = combineReducers({\n  preparedPosts: postsReducer,\n  isLoading: isLoadingReducer,\n});\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","const getDataFromUrl = async(url, defaultData) => {\n  const responsePromise = await fetch(url);\n\n  if (responsePromise.ok) {\n    const data = await responsePromise.json();\n\n    return data;\n  }\n\n  return defaultData;\n};\n\nexport default getDataFromUrl;\n","const postsUrl = 'https://jsonplaceholder.typicode.com/posts/';\n\nexport default postsUrl;\n","const usersUrl = 'https://jsonplaceholder.typicode.com/users';\n\nexport default usersUrl;\n","const commentsUrl = 'https://jsonplaceholder.typicode.com/comments';\n\nexport default commentsUrl;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PostAuthorInfo = ({ postAuthor }) => (\n\n  <div className=\"post__author-info\">\n\n    <h3 className=\"author-info__name\">{postAuthor.name}</h3>\n    <p className=\"author-info__email\">{postAuthor.email}</p>\n    <p className=\"author-info__address\">\n        street:\n      {' '}\n      {postAuthor.address.street}\n      <br />\n        suite:\n      {' '}\n      {postAuthor.address.suite}\n      <br />\n        city:\n      {' '}\n      {postAuthor.address.city}\n      <br />\n        zipcode:\n      {' '}\n      {postAuthor.address.zipcode}\n    </p>\n\n  </div>\n\n);\n\nPostAuthorInfo.propTypes = {\n  postAuthor: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.object,\n  }).isRequired,\n\n};\n\nexport default PostAuthorInfo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {setCommentIdToRemove} from \"../../../../store/PostListReducer\";\nimport {connect} from \"react-redux\";\n\nconst NewComment = ({ singleComment, setCommentToRemove}) => {\n\n  return (\n    <li className=\"comment\">\n      <div className=\"comment__author-info\">\n        {singleComment.name}\n        <br />\n        {singleComment.email}\n      </div>\n      <div className=\"comment__body\">\n        {singleComment.body}\n      </div>\n      <button\n        onClick={()=>{\n          setCommentToRemove(singleComment.id,singleComment.postId)\n        }}\n        type={'button'}\n        className={'button button_remove button_remove_comment'}>\n        Delete Comment\n      </button>\n    </li>\n\n  );\n}\n\nNewComment.propTypes = {\n  singleComment: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    body: PropTypes.string,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n})\n\nconst mapDispatchToProps = {\n  setCommentToRemove: setCommentIdToRemove\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(NewComment);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport OneComment from './Comment/NewComment';\n\nconst CommentList = ({ comments }) => (\n  <ul className=\"post__comments\">\n    {comments.map(\n      comment => <OneComment key={comment.id} singleComment={comment} />\n    )}\n  </ul>\n);\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.object,\n  ).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PostAuthorInfo from './PostAuthorInfo';\nimport CommentList from './CommentList/CommentList';\nimport {connect} from 'react-redux';\nimport {\n  removePost,\n} from \"../../store/PostListReducer\";\n\nconst Post = ({ singlePost, searchQuery, removePostId,}) => {\n  const getHighlightedText = (text, textToHighLight) => {\n    const formatedText = text.replace(/[\\n\\r]/g, ' ');\n\n    if (textToHighLight.length === 0) {\n      return <span>{formatedText}</span>;\n    }\n\n    const regular = new RegExp(`(${textToHighLight})`, 'gi');\n\n    return (\n      <span>\n        {formatedText.split(regular).map(\n          (part, index) => (part === textToHighLight\n            ? (\n              <span\n                key={part + index.toString()}\n                className=\"highlighted\"\n              >\n                {part}\n              </span>\n            )\n            : part)\n        )}\n      </span>\n    );\n  };\n\n  return (\n    <>\n      <article className=\"post\">\n        <h1 className=\"post__title\">\n          {getHighlightedText(singlePost.title, searchQuery)}\n        </h1>\n        <button\n          onClick={()=>{removePostId(singlePost.id)}}\n          className={'button button_remove button_remove_post'}\n          type={'button'}\n        >\n          Delete Post\n        </button>\n        <h2 className=\"post__body\">\n          {getHighlightedText(singlePost.body, searchQuery)}\n        </h2>\n        <PostAuthorInfo postAuthor={singlePost.author} />\n        <CommentList comments={singlePost.comments} />\n      </article>\n    </>\n  );\n};\n\nPost.propTypes = {\n  singlePost: PropTypes.shape({\n    title: PropTypes.string,\n    body: PropTypes.string,\n    author: PropTypes.object,\n    comments: PropTypes.array,\n  }).isRequired,\n  searchQuery: PropTypes.string,\n};\n\nPost.defaultProps = {\n  searchQuery: '',\n};\n\n\nconst mapStateToProps = state => ({\n\n});\n\nconst mapDispatchToProps = {\n  removePostId: removePost,\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Post);\n","/* eslint-disable no-shadow */\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport getDataFromUrl from '../api/getDataFromUrl';\nimport postsUrl from '../api/postsUrl';\nimport usersUrl from '../api/usersUrl';\nimport commentsUrl from '../api/commentsUrl';\nimport Post from './Post/Post';\nimport { getPreparedPosts,\n  setPosts,\n  getIsLoadedPosts,\n  setIsLoaded } from '../store/PostListReducer';\nimport {\n  getIsLoading,\n  setIsLoading } from '../store/IsLoadingReducer';\n\nfunction PostList(\n  {\n    preparedPosts,\n    setPreparedPosts,\n    isLoadingPosts,\n    setIsLoadingPosts,\n    isLoadedPosts,\n    setIsLoadedPosts,\n  }\n) {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const getPreparedPostsFromServer = async() => {\n    const [posts, users, comments] = await Promise.all(\n      [getDataFromUrl(postsUrl, []),\n        getDataFromUrl(usersUrl, []),\n        getDataFromUrl(commentsUrl, [])]\n    );\n\n    return posts.map(\n      post => ({\n        ...post,\n        author: users.find(\n          user => user.id === post.userId\n        ),\n        comments: comments.filter(\n          comment => comment.postId === post.id\n        ),\n      })\n    );\n  };\n\n  const handleInputChange = (text) => {\n    setSearchQuery(text.trim().toLowerCase());\n  };\n\n  const debounce = (func, delay) => {\n    let timer;\n\n    return (...args) => {\n      clearTimeout(timer);\n      timer = setTimeout(func, delay, ...args);\n    };\n  };\n\n  const debouncedHandleInputChange = debounce(handleInputChange, 1000);\n\n  return (\n    isLoadedPosts\n      ? (\n        <section className=\"posts\">\n          <input\n            type=\"text\"\n            name=\"searchInPosts\"\n            className=\"input input_search-in-posts\"\n            onChange={event => debouncedHandleInputChange(event.target.value)}\n            placeholder=\"type for searching\"\n          />\n\n          <ul className=\"posts-list\">\n\n            {preparedPosts\n              .filter(\n                post => (\n                  (post.title + post.body).replace(/[\\n\\r]/g, ' ')\n                    .toLowerCase().includes(searchQuery)\n                )\n              )\n              .map(\n                post => (\n                  <li key={post.id} className=\"post-list__item\">\n                    <Post searchQuery={searchQuery} singlePost={post} />\n                  </li>\n                )\n              )\n            }\n          </ul>\n        </section>\n      )\n      : (\n        <button\n          type=\"button\"\n          onClick={\n            async() => {\n              setIsLoadingPosts(true);\n              setPreparedPosts(await getPreparedPostsFromServer());\n              setIsLoadedPosts(true);\n            }\n          }\n        >\n          {isLoadingPosts ? 'Loading' : 'Load the List of Posts'}\n        </button>\n      )\n\n  );\n}\n\nconst mapStateToProps = state => ({\n  preparedPosts: getPreparedPosts(state),\n  isLoadingPosts: getIsLoading(state),\n  isLoadedPosts: getIsLoadedPosts(state),\n});\n\nconst mapDispatchToProps = {\n  setPreparedPosts: setPosts,\n  setIsLoadingPosts: setIsLoading,\n  setIsLoadedPosts: setIsLoaded,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PostList);\n\nPostList.propTypes = {\n  preparedPosts: PropTypes.arrayOf(\n    PropTypes.object\n  ),\n  setPreparedPosts: PropTypes.func.isRequired,\n  isLoadingPosts: PropTypes.bool.isRequired,\n  setIsLoadingPosts: PropTypes.func.isRequired,\n  isLoadedPosts: PropTypes.bool.isRequired,\n  setIsLoadedPosts: PropTypes.func.isRequired,\n};\n\nPostList.defaultProps = {\n  preparedPosts: [],\n};\n","import React from 'react';\nimport PostList from './PostList/PostList';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <h1 className=\"app-heading\">Dynamic list of posts</h1>\n      <PostList />\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root')\n);\n"],"sourceRoot":""}