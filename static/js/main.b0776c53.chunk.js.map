{"version":3,"sources":["api/getDataFromUrl.js","store/IsLoadingReducer.js","store/IsLoadedPostsReducer.js","store/hasErrorReducer.js","store/PostListReducer.js","store/index.js","PostList/Post/PostAuthorInfo.js","PostList/Post/CommentList/Comment/NewComment.js","PostList/Post/CommentList/CommentList.js","PostList/Post/Post.js","PostList/PostList.js","api/getPreparedPostsFromServer.js","api/postsUrl.js","api/usersUrl.js","api/commentsUrl.js","App.js","index.js"],"names":["getDataFromUrl","url","defaultData","responsePromise","data","regenerator_default","a","async","_context","prev","next","awrap","fetch","sent","json","abrupt","stop","setIsLoading","isLoading","type","getIsLoading","state","isLoadingReducer","arguments","length","undefined","action","getIsLoadedPosts","isLoadedPosts","isLoadedPostsReducer","status","setHasError","value","hasError","hasErrorReducer","getPreparedPosts","preparedPosts","postsReducer","posts","map","post","id","postId","Object","objectSpread2","comments","filter","comment","commentId","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","PostAuthorInfo","_ref","postAuthor","react_default","createElement","className","name","email","address","street","suite","city","zipcode","mapDispatchToProps","setCommentToRemove","connect","singleComment","body","onClick","CommentList","Comment_NewComment","key","Post","singlePost","searchQuery","removePostId","getHighlightedText","text","textToHighLight","formatedText","replace","regular","RegExp","concat","split","part","index","toString","Fragment","title","Post_PostAuthorInfo","author","Post_CommentList_CommentList","defaultProps","PostList","isLoadingPosts","loadPosts","_useState","useState","_useState2","slicedToArray","setSearchQuery","loadPostsFromServer","debouncedHandleInputChange","func","delay","timer","clearTimeout","_len","args","Array","_key","setTimeout","apply","debounce","trim","toLowerCase","visiblePosts","includes","onChange","event","target","placeholder","PostList_Post_Post","dispatch","_ref2","users","postsFromServer","Promise","all","find","user","userId","getPreparedPostsFromServer","then","setPosts","catch","finally","App","PostList_PostList","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b0776c53.chunk.js","sourcesContent":["const getDataFromUrl = async(url, defaultData) => {\n  const responsePromise = await fetch(url);\n\n  const data = await responsePromise.json();\n\n  return data;\n};\n\nexport default getDataFromUrl;\n","const SET_IS_LOADING = 'SET_IS_LOADING';\n\nexport const setIsLoading = isLoading => ({\n  type: SET_IS_LOADING,\n  isLoading,\n});\n\nexport const getIsLoading = state => state.isLoading;\n\nconst isLoadingReducer = (isLoading = false, action) => {\n  switch (action.type) {\n    case SET_IS_LOADING: return action.isLoading;\n\n    default:\n      return isLoading;\n  }\n};\n\nexport default isLoadingReducer;\n","const IS_LOADED_POSTS = 'IS_LOADED_POSTS';\n\nexport const setIsLoadedPosts = value => ({\n  type: IS_LOADED_POSTS,\n  status: value,\n});\n\nexport const getIsLoadedPosts = state => state.isLoadedPosts;\n\nconst isLoadedPostsReducer = (isLoadedPosts = false, action) => {\n  switch (action.type) {\n    case IS_LOADED_POSTS: return action.status;\n\n    default: return isLoadedPosts;\n  }\n};\n\nexport default isLoadedPostsReducer;\n","/* eslint-disable no-shadow */\nconst SET_HAS_ERROR = 'SET_HAS_ERROR';\n\nexport const setHasError = value => ({\n  type: SET_HAS_ERROR,\n  hasError: value,\n});\n\nexport const hasError = state => state.hasError;\n\nconst hasErrorReducer = (hasError = false, action) => {\n  switch (action.type) {\n    case SET_HAS_ERROR: return action.hasError;\n\n    default: return hasError;\n  }\n};\n\nexport default hasErrorReducer;\n","import { getPreparedPostsFromServer } from '../api/getPreparedPostsFromServer';\nimport { setIsLoading } from './IsLoadingReducer';\nimport { setIsLoadedPosts } from './IsLoadedPostsReducer';\nimport { setHasError } from './hasErrorReducer';\n\nconst SET_PREPARED_POSTS = 'SET_POSTS';\nconst DELETE_COMMENT = 'DELETE_COMMENT';\nconst DELETE_POST = 'DELETE_POST';\n\nexport const setPosts = posts => ({\n  type: SET_PREPARED_POSTS,\n  posts,\n});\n\nexport const removeComment = (commentId, postId) => ({\n  type: DELETE_COMMENT,\n  commentId,\n  postId,\n});\n\nexport const removePost = postId => ({\n  type: DELETE_POST,\n  postId,\n});\n\nexport const getPreparedPosts = state => state.preparedPosts;\n\nexport const loadPosts = () => (dispatch) => {\n  dispatch(setHasError(false));\n  dispatch(setIsLoading(true));\n\n  return getPreparedPostsFromServer()\n    .then((posts) => {\n      dispatch(setPosts(posts));\n    })\n    .catch(() => {\n      dispatch(setHasError(true));\n    })\n    .finally(() => {\n      dispatch(setIsLoading(false));\n      dispatch(setIsLoadedPosts(true));\n    });\n};\n\nconst postsReducer = (preparedPosts = [], action) => {\n  switch (action.type) {\n    case SET_PREPARED_POSTS:\n      return action.posts;\n\n    case DELETE_COMMENT: return preparedPosts\n      .map(\n        (post) => {\n          if (post.id === action.postId) {\n            return {\n              ...post,\n              comments: post.comments.filter(\n                comment => comment.id !== action.commentId\n              ),\n            };\n          }\n\n          return post;\n        }\n      );\n\n    case DELETE_POST: return preparedPosts\n      .filter(\n        post => post.id !== action.postId\n      );\n\n    default:\n      return preparedPosts;\n  }\n};\n\nexport default postsReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport postsReducer from './PostListReducer';\nimport isLoadingReducer from './IsLoadingReducer';\nimport isLoadedPostsReducer from './IsLoadedPostsReducer';\nimport hasErrorReducer from './hasErrorReducer';\n\nconst rootReducer = combineReducers({\n  preparedPosts: postsReducer,\n  isLoading: isLoadingReducer,\n  isLoadedPosts: isLoadedPostsReducer,\n  hasError: hasErrorReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PostAuthorInfo = ({ postAuthor }) => (\n\n  <div className=\"post__author-info\">\n\n    <h3 className=\"author-info__name\">{postAuthor.name}</h3>\n    <p className=\"author-info__email\">{postAuthor.email}</p>\n    <p className=\"author-info__address\">\n        street:\n      {' '}\n      {postAuthor.address.street}\n      <br />\n        suite:\n      {' '}\n      {postAuthor.address.suite}\n      <br />\n        city:\n      {' '}\n      {postAuthor.address.city}\n      <br />\n        zipcode:\n      {' '}\n      {postAuthor.address.zipcode}\n    </p>\n\n  </div>\n\n);\n\nPostAuthorInfo.propTypes = {\n  postAuthor: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.object,\n  }).isRequired,\n\n};\n\nexport default PostAuthorInfo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { removeComment } from '../../../../store/PostListReducer';\n\nconst NewComment = ({ singleComment, setCommentToRemove }) => (\n  <li className=\"comment\">\n    <div className=\"comment__author-info\">\n      {singleComment.name}\n      <br />\n      {singleComment.email}\n    </div>\n    <div className=\"comment__body\">\n      {singleComment.body}\n    </div>\n    <button\n      onClick={() => {\n        setCommentToRemove(singleComment.id, singleComment.postId);\n      }}\n      type=\"button\"\n      className=\"button button_remove button_remove_comment\"\n    >\n        Delete Comment\n    </button>\n  </li>\n\n);\n\nNewComment.propTypes = {\n  singleComment: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    body: PropTypes.string,\n    id: PropTypes.number,\n    postId: PropTypes.number,\n  }).isRequired,\n  setCommentToRemove: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n});\n\nconst mapDispatchToProps = {\n  setCommentToRemove: removeComment,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewComment);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport OneComment from './Comment/NewComment';\n\nconst CommentList = ({ comments }) => (\n  <ul className=\"post__comments\">\n    {comments.map(\n      comment => <OneComment key={comment.id} singleComment={comment} />\n    )}\n  </ul>\n);\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.object,\n  ).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport PostAuthorInfo from './PostAuthorInfo';\nimport CommentList from './CommentList/CommentList';\nimport {\n  removePost,\n} from '../../store/PostListReducer';\n\nconst Post = ({ singlePost, searchQuery, removePostId }) => {\n  const getHighlightedText = (text, textToHighLight) => {\n    const formatedText = text.replace(/[\\n\\r]/g, ' ');\n\n    if (textToHighLight.length === 0) {\n      return <span>{formatedText}</span>;\n    }\n\n    const regular = new RegExp(`(${textToHighLight})`, 'gi');\n\n    return (\n      <span>\n        {formatedText.split(regular).map(\n          (part, index) => (part === textToHighLight\n            ? (\n              <span\n                key={part + index.toString()}\n                className=\"highlighted\"\n              >\n                {part}\n              </span>\n            )\n            : part)\n        )}\n      </span>\n    );\n  };\n\n  return (\n    <>\n      <article className=\"post\">\n        <h1 className=\"post__title\">\n          {getHighlightedText(singlePost.title, searchQuery)}\n        </h1>\n        <button\n          onClick={() => {\n            removePostId(singlePost.id);\n          }}\n          className=\"button button_remove button_remove_post\"\n          type=\"button\"\n        >\n          Delete Post\n        </button>\n        <h2 className=\"post__body\">\n          {getHighlightedText(singlePost.body, searchQuery)}\n        </h2>\n        <PostAuthorInfo postAuthor={singlePost.author} />\n        <CommentList comments={singlePost.comments} />\n      </article>\n    </>\n  );\n};\n\nPost.propTypes = {\n  singlePost: PropTypes.shape({\n    title: PropTypes.string,\n    body: PropTypes.string,\n    author: PropTypes.object,\n    comments: PropTypes.array,\n    id: PropTypes.number,\n  }).isRequired,\n  searchQuery: PropTypes.string,\n  removePostId: PropTypes.func.isRequired,\n};\n\nPost.defaultProps = {\n  searchQuery: '',\n};\n\nconst mapStateToProps = state => ({\n\n});\n\nconst mapDispatchToProps = {\n  removePostId: removePost,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);\n","/* eslint-disable no-shadow */\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport Post from './Post/Post';\nimport { getPreparedPosts,\n  loadPosts } from '../store/PostListReducer';\nimport { getIsLoading } from '../store/IsLoadingReducer';\nimport { getIsLoadedPosts } from '../store/IsLoadedPostsReducer';\n\nimport { hasError } from '../store/hasErrorReducer';\n\nfunction PostList(\n  {\n    preparedPosts,\n    isLoadingPosts,\n    isLoadedPosts,\n    loadPosts,\n    hasError,\n  }\n) {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const loadPostsFromServer = async() => {\n    await loadPosts();\n  };\n\n  const handleInputChange = (text) => {\n    setSearchQuery(text.trim().toLowerCase());\n  };\n\n  const debounce = (func, delay) => {\n    let timer;\n\n    return (...args) => {\n      clearTimeout(timer);\n      timer = setTimeout(func, delay, ...args);\n    };\n  };\n\n  const debouncedHandleInputChange = debounce(handleInputChange, 1000);\n\n  const visiblePosts = preparedPosts\n    .filter(\n      post => (\n        (post.title + post.body).replace(/[\\n\\r]/g, ' ')\n          .toLowerCase().includes(searchQuery)\n      )\n    );\n\n  if (hasError) {\n    return (\n      <section>\n        <p>Something went wrong, try to reload page</p>\n        <button\n          type=\"button\"\n          onClick={\n            () => {\n              loadPostsFromServer();\n            }\n\n          }\n        >\n          {isLoadingPosts ? 'Loading' : 'Load the List of Posts'}\n        </button>\n      </section>\n    );\n  }\n\n  return (\n    isLoadedPosts\n      ? (\n        <section className=\"posts\">\n          <input\n            type=\"text\"\n            name=\"searchInPosts\"\n            className=\"input input_search-in-posts\"\n            onChange={event => debouncedHandleInputChange(event.target.value)}\n            placeholder=\"type for searching\"\n          />\n\n          {\n            visiblePosts.length === 0\n              ? (\n                <section className=\"nothing-was-found\">\n                Nothing was found...\n                </section>\n              )\n              : (\n                <ul className=\"posts-list\">\n                  {visiblePosts\n                    .map(\n                      post => (\n                        <li key={post.id} className=\"post-list__item\">\n                          <Post searchQuery={searchQuery} singlePost={post} />\n                        </li>\n                      )\n                    )\n                  }\n                </ul>\n              )\n          }\n\n        </section>\n      )\n      : (\n        <button\n          type=\"button\"\n          onClick={\n            loadPostsFromServer\n          }\n        >\n          {isLoadingPosts ? 'Loading' : 'Load the List of Posts'}\n        </button>\n      )\n\n  );\n}\n\nconst mapStateToProps = state => ({\n  preparedPosts: getPreparedPosts(state),\n  isLoadingPosts: getIsLoading(state),\n  isLoadedPosts: getIsLoadedPosts(state),\n  hasError: hasError(state),\n});\n\nconst mapDispatchToProps = {\n  loadPosts,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PostList);\n\nPostList.propTypes = {\n  preparedPosts: PropTypes.arrayOf(\n    PropTypes.object\n  ),\n  isLoadingPosts: PropTypes.bool.isRequired,\n  isLoadedPosts: PropTypes.bool.isRequired,\n  loadPosts: PropTypes.func.isRequired,\n  hasError: PropTypes.func.isRequired,\n};\n\nPostList.defaultProps = {\n  preparedPosts: [],\n};\n","import getDataFromUrl from './getDataFromUrl';\nimport postsUrl from './postsUrl';\nimport usersUrl from './usersUrl';\nimport commentsUrl from './commentsUrl';\n\nexport const getPreparedPostsFromServer = async() => {\n  const [posts, users, comments] = await Promise.all(\n    [getDataFromUrl(postsUrl, []),\n      getDataFromUrl(usersUrl, []),\n      getDataFromUrl(commentsUrl, [])]\n  );\n\n  const postsFromServer = posts.map(\n    post => ({\n      ...post,\n      author: users.find(\n        user => user.id === post.userId\n      ),\n      comments: comments.filter(\n        comment => comment.postId === post.id\n      ),\n    })\n  );\n\n  return postsFromServer;\n};\n","const postsUrl = 'https://jsonplaceholder.typicode.com/posts/';\n\nexport default postsUrl;\n","const usersUrl = 'https://jsonplaceholder.typicode.com/users';\n\nexport default usersUrl;\n","const commentsUrl = 'https://jsonplaceholder.typicode.com/comments';\n\nexport default commentsUrl;\n","import React from 'react';\nimport PostList from './PostList/PostList';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <h1 className=\"app-heading\">Dynamic list of posts</h1>\n      <PostList />\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root')\n);\n"],"sourceRoot":""}